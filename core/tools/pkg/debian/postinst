#! /bin/sh
# postinst script for twiki
#
# see: dh_installdeb(1)

# not www-data.  remember to sync with rules.
TWIKI_OWNER=www-data

set -e
# Source debconf library.
. /usr/share/debconf/confmodule


# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see /usr/share/doc/packaging-manual/
#
# quoting from the policy:
#     Any necessary prompting should almost always be confined to the
#     post-installation script, and should be protected with a conditional
#     so that unnecessary prompting doesn't happen if a package's
#     installation fails and the `postinst' is called with `abort-upgrade',
#     `abort-remove' or `abort-deconfigure'.


db_get twiki/samplefiles
if [ "$RET" = true ]; then
#check for the existance of _any_ of the default webs
#TODO: later this will be replaced by the upgrade script
    if [ ! -e /var/lib/twiki/data/Main/WebHome.txt ]; then
        if [ ! -e /var/lib/twiki/data/TWiki/WebHome.txt ]; then
	if [ ! -e /var/lib/twiki/data/Sandbox/WebHome.txt ]; then
	if [ ! -e /var/lib/twiki/data/Trash/WebHome.txt ]; then
	if [ ! -e /var/lib/twiki/data/_default/WebHome.txt ]; then
		    # only extract if they say so and there's no home there
		    # and even then, fail on overwrite so we don't stomp.
		    tar -zxk -C / -f /usr/share/twiki/twiki-data.tar.gz
		    # clean up the .mailnotify timestamps.
		    webs="Main Sandbox TWiki Trash _default";
		    for web in $webs; do
		    	    date +%s > /var/lib/twiki/data/$web/.mailnotify
    		    done
			if [ ! -e /var/lib/twiki/pub/wikiHome.gif ]; then
				tar -zxk -C / -f /usr/share/twiki/twiki-pub.tar.gz
			fi
       	fi
       	fi
       	fi
        fi
    fi
fi

db_get twiki/defaultUrlHost
# be more robust later:
perl -pi~ -e '$U=q{'"$RET"'}; s{http://your.domain.com}{$U}g;' /etc/twiki/LocalSite.cfg
perl -pi~ -e '$U=q{'"$RET"'}; s{http://your.domain.com}{$U}g;' /etc/twiki/apache.conf
#remove the double //cgi-bin caused by putting a / at the end of the hostUrl
perl -pi~ -e 's{/(/cgi-bin)}{$1}g;' /etc/twiki/apache.conf
#perl -pi~ -e '$U=q{'"$RET"'}; s{^(Redirect\s+/twiki/index.html\s+).*(cgi-bin/twiki/view\n)$}{$1$U$2};' /etc/twiki/apache.conf
rm /etc/twiki/*~ 

db_get twiki/wikiwebmaster
# do rcs checkout first?
#TODO: these settings should move to Main.SitePreferences
if [ ! -e /var/lib/twiki/data/TWiki/DefaultPreferences.txt ]; then
	perl -pi~ -e '$U=q{'"$RET"'}; s/^(.*\*\s*Set\s*WIKIWEBMASTER\s*=\s*).*(\r?\n)$/\1$U\2/;' /var/lib/twiki/data/TWiki/DefaultPreferences.txt
	#force default to use sendmail by setting SMTPMAILHOST to blank
	perl -pi~ -e 's/^(\s*\*\s*Set\s*SMTPMAILHOST\s*=\s*).*(\r\n)$/$1$2/;' /var/lib/twiki/data/TWiki/DefaultPreferences.txt
fi

# user + password authorized to run configure script
db_get twiki/adminuser
configuser="$RET"
perl -pi~ -e '$U=q{'"$RET"'}; s/^([^#]*Require user).*/$1 $U/g;' /etc/twiki/apache.conf

db_get twiki/adminpassword
configpassword="$RET"

# prevent further confusion: done with debconfig

# regrettably, this doesn't actually permit us to do further I/O.
# Rewrite this in perl, if we ever find a non-kerberos example of how
# to do so.

case "$1" in
    configure)
#	P=/usr/lib/cgi-bin/twiki
#	for i in attach changes edit geturl installpasswd mailnotify oops passwd preview rdiff register rename save search statistics testenv upload view viewfile; do
#	    if ! dpkg-statoverride --list $P/$i >/dev/null; then
#		dpkg-statoverride --update --add $TWIKI_OWNER www-data 4555 $P/$i
#	    fi
#	done

	servers="apache apache-perl apache-ssl apache2"
	for server in $servers; do 
		if [ -e /etc/$server/conf.d ]; then
			includefile=/etc/twiki/apache.conf
			if [ -e /etc/$server/conf.d/twiki.conf ]; then
				rm -f /etc/twiki/$server-conf.d-twiki.conf_old
				mv /etc/$server/conf.d/twiki.conf /etc/twiki/$server-conf.d-twiki.conf_old
			fi
			ln -s $includefile /etc/$server/conf.d/twiki.conf 
			if [ $server = "apache2" ]; then
				a2enmod  authn_file
				a2enmod  rewrite
			else
				apache-modconf $server enable authn_file
				apache-modconf $server enable rewrite
			fi
		fi
	done

	#add apache2 cgi
	if [ -e /etc/apache2/mods-available/cgi.load ]; then
		if [ ! -e /etc/apache2/mods-enabled/cgi.load ]; then
			ln -s /etc/apache2/mods-available/cgi.load /etc/apache2/mods-enabled/cgi.load
		fi
	fi

	# create initial htpasswd, if needed
	if [ -e /var/lib/twiki/data ]; then	
		#for now prefer apache 1 config, I don't know how to detect which one is prefered
		if [ -e /usr/bin/htpasswd2 ]; then
			HTPASSWDCMD="/usr/bin/htpasswd2";
		fi
		if [ -e /usr/bin/htpasswd ]; then
			HTPASSWDCMD="/usr/bin/htpasswd";
		fi
		if [ -e $HTPASSWDCMD ]; then
			#if the user has installed without initial universe then we can't do this
			if [ ! -e /var/lib/twiki/data/.htpasswd ]; then
			    touch /var/lib/twiki/data/.htpasswd
			    chmod 660 /var/lib/twiki/data/.htpasswd
			fi
		       	$HTPASSWDCMD -b /var/lib/twiki/data/.htpasswd "$configuser" "$configpassword"
			chown $TWIKI_OWNER.www-data /var/lib/twiki/data/.htpasswd
		fi
	fi

	#remove the  .htaccess file - moved to apache-twiki.conf
	if [ -e /usr/lib/cgi-bin/twiki/.htaccess ]; then
		rm /usr/lib/cgi-bin/twiki/.htaccess 
	fi
	if [ -e /etc/twiki/.htaccess ]; then
		rm /etc/twiki/.htaccess 
	fi

	#create securer-twiki session dir
	if [ ! -e /var/lib/twiki/working ]; then
		mkdir /var/lib/twiki/working 
	fi
	chown $TWIKI_OWNER.www-data /var/lib/twiki/working
	if [ ! -e /var/lib/twiki/working/work_areas ]; then
		mkdir /var/lib/twiki/working/work_areas
	fi
	chown $TWIKI_OWNER.www-data /var/lib/twiki/working/work_areas

	#mmmm, mailnotify etc may be running _not_ as www-data
	#and for some reason create a session
	#use 1777 to prevent third parties replacing the file with a doctored one
	#put into /tmp/twiki so that the open dir can't be used by others to fill up /var, thus crashing all logging
	if [ ! -e /tmp/twiki ]; then
		mkdir /tmp/twiki
	fi
	chmod 1777 /tmp/twiki
	chown $TWIKI_OWNER.www-data /tmp/twiki

	#add softlinks to make adding plugins easier ()
	if [ ! -e /var/lib/twiki/lib ]; then
		ln -s /usr/share/perl5 /var/lib/twiki/lib
	fi
	if [ ! -e /var/lib/twiki/pub ]; then
		ln -s /var/lib/twiki/pub /var/lib/twiki/pub
	fi
	if [ ! -e /var/lib/twiki/bin ]; then
		ln -s /usr/lib/cgi-bin/twiki/ /var/lib/twiki/bin
	fi
	if [ ! -e /var/lib/twiki/log ]; then
		ln -s /var/log/twiki /var/lib/twiki/log
	fi
	
	chown -R $TWIKI_OWNER.www-data /var/log/twiki
	chmod -R 755 /var/log/twiki
	chown $TWIKI_OWNER.www-data /etc/twiki/LocalSite.cfg
	chown -R $TWIKI_OWNER.www-data /var/lib/twiki
	chown -R $TWIKI_OWNER.www-data /var/lib/twiki/locale
	chown -R $TWIKI_OWNER.www-data /var/lib/twiki/templates
	chown -R $TWIKI_OWNER.www-data /var/lib/twiki/tools

	# erase configuser password
        db_reset "twiki/adminpassword"
	db_fset  "twiki/adminpassword" "seen" "false" || true

	db_stop

	
	# reload apache configs
	for server in $servers; do
		if [ -e /etc/init.d/$server ]; then
			echo reloading $server config
                	/etc/init.d/$server reload
		fi
	done

    ;;

    abort-upgrade|abort-remove|abort-deconfigure)

    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
