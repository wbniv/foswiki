# 8/9/2005 Stanley Knutson for Swish-e V2.4.3
# Tweaked 8/17/05 

# the stopwords directory contents are the same as their example
# key changes are
#    - add the FileFilter settings
#    - ensure StoreDescription is appropriate

# ----- Site-wide settings -------
#
#
#  Please see the swish-e documentation for
#  information on configuration directives.
#  Documentation is included with the swish-e
#  distribution, and also can be found on-line
#  at http://swish-e.org
#
#
#  This example demonstrates how to define
#  settings that change the way swish indexes.
#  Since you will probably want consistent
#  settings for all your indexes, you can
#  create one file, and include it in other
#  config files.
#
#  Once you define a common configuration file you
#  can include it in other configuration files.  For
#  example, if this file was saved as "common.config"
#  you can include it in other configuration files
#  with the following directive:
#
#       ...
#       IncludeConfig  /home/swish/common.config
#       ...
#
#---------------------------------------------------

# These settings tell swish what defines a word.

# We only index words that include letters, numbers, a dash,
# or a period.  (Not very realistic)

# These are the characters that are allowed in a "word".
# i.e. words are split on any character NOT found in WordCharacters

WordCharacters abcdefghijklmnopqrstuvwxyz0123456789_.-


# We allow a period and a dash within words, but strip them
# from the beginning or end of a word.  This is done after
# WordCharacters above is used to split words.

IgnoreFirstChar .-_
IgnoreLastChar  .-_

# Finally, resulting words must begin/end with one
# of the characters listed here

BeginCharacters abcdefghijklmnopqrstuvwxyz0123456789
EndCharacters   abcdefghijklmnopqrstuvwxyz0123456789


# Turn this on for a slight performance improvement
#FollowSymLinks yes


# This is how detailed you want reporting. You can specify numbers
# 0 to 3 - 0 is totally silent, 3 is the most verbose.
# 4 is debugging.  Can be overridden with -v on the command line

IndexReport 3


# Set the stopwords (words to ignore when searching and when indexing)
# Carefully think about this feature before using a list of stopwords
# You can list the words here:
#  IgnoreWords of or and the a to
# Or you can use the compiled in defaults:
#  IgnoreWords SwishDefault
# Or you can use a file that includes your own words:

# make absolute path to allow reuse of this config
IgnoreWords file: stopwords/purisma-stopwords.txt

# Another option is to use the IgnoreLimit directive, and
# swish will determine what stopwords to use.  But please
# read the documentation before using the IgnoreLimit directive.
# It can be slow, and may not work with other options.


# Since we are using such a restrictive WordCharacters settings, we
# want to map eight-bit characters to ascii.
# For example, "resumé" will be indexed and searched as "resume".
# See docs for more info.

TranslateCharacters :ascii7:


# We don't want pharse searches to work across sentenses, plus
# we use the pipe "|" to force a break in phrases when indexing.

BumpPositionCounterCharacters |.

# enable the various filter programs we have installed
#  these are NOT enabled here, since the spider.pl filtering is used for better speed
#  except for .pot, which it does not do by default
FileFilter .pot       /usr/local/bin/catppt "-s8859-1 -d8859-1 '%p'"
# FileFilter .doc       /usr/local/bin/catdoc "-s8859-1 -d8859-1 '%p'"
# FileFilter .ppt       /usr/local/bin/catppt "-s8859-1 -d8859-1 '%p'"
#   if pdftotext is used, then the IndexContents has to change to match
# FileFilter .pdf       /usr/local/bin/pdftotext "'%p' -"
# spider.pl -> its filter handles .xls 

# Swish can index a number of different types of documents.
# list the XML and TXT things here, otherwise the HTML2 parser will be used
IndexContents TXT .config
# pdf via swish_filter in spidering returns XML
IndexContents XML .pdf
IndexContents TXT .doc
IndexContents TXT .ppt
IndexContents TXT .pot
# the filtering maps xls to html, use default html indexer

# we only keep the first 40k words, enough for ~80 pages
StoreDescription HTML* <body> 40000
StoreDescription TXT 40000
StoreDescription XML 40000

# Since the pdf2xml module generates xml for the PDF info fields and
# for the PDF content, let's use MetaNames
# Instead of specifying each metaname, let's let swish do it automatically.
UndefinedMetaTags auto



