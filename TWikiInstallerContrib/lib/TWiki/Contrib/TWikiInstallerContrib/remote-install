#!/usr/bin/perl
<<________________________________________________________________________________;

IF YOU SEE THIS NOTICE INSTEAD OF THE INSTALLATION WEB PAGE, YOUR APACHE FAILS YOU

* CREATE A .htaccess FILE IN THE SAME DIRECTORY THAT THIS SCRIPT IS LOCATED:

Shell access
============
$ echo "SetHandler cgi-script" >.htaccess

FTP-only access
===============
Create a new .htaccess file locally and FTP it.  The file should consist of the single line:
SetHandler cgi-script

* AND THEN REFRESH THIS PAGE
________________________________________________________________________________
# Copyright 2004,2005,2007 Will Norris.  All Rights Reserved.




# $Id: install_twiki.cgi 7202 2005-10-28 20:36:14Z WillNorris $
# License: GPL
use strict;
use warnings;
#use Data::Dumper qw( Dumper );
++$|;

################################################################################
# CGI parameters:
# force: force (re)installation, even if twiki/ directory is already present
# perl: name of perl executable (autodetected, but can be manually overridden)
# kernel: name of kernel to install (eg, TWikiKernelDEVELOP7684)
# extension: name of extensions to install (BlogPlugin, ImageGalleryPlugin, PublishContrib)
# TWikiFor: 
#
# TODO parameters:
# from http://twiki.org/cgi-bin/view/Sandbox/WillNorrisSandbox?DOMAIN=admin.langalot.com&TWIKI_URL_PATH_DIR=twiki&USER=wn&DEFAULT_WEB=&ADMIN=webmaster&install_type=svn_main
# * DOMAIN
# * URL PATH
# * DREAMHOST USER
# * DEFAULT WEB
# * ADMINISTRATOR
#
# make sure installs relative to script directory
# configure admin user and password (twice)
# create useres 'properly'
# directions to create .htaccess: "SetHandler cgi-script"
# add repositories (first: http://twiki.org/p/pub/Codev/Release/TWiki-4.1.2.zip)
# add feedback (unzip progress meter or something)
#
# administrator ($twikiAdmin)
#	(and update Main.TWikiAdminGroup)
# wikiwebmaster (for email about this wiki site) - 
#	(and update TWiki.MainPreferences) - $wikiWebMaster
#
# other TODO?
# 	could create a TWikiInstallationReport topic...
#
# DONE
# move 'configure & select individual components' checkbox to after we even know if there are any
# clicking repository updates url field
# 
################################################################################

use File::Path qw( mkpath rmtree );
use CGI qw( :standard );
use FindBin;
use File::Basename qw( basename );
use Cwd qw( abs_path );
use English;
#use WWW::Mechanize::TWiki 0.08;
#use Error qw( :try );

my $q = CGI::new() or die $!;
# object data
my $LocalSiteCfg;
my $twikiAdmin = $q->param('TWikiAdmin') || '';
my $WebMasterEmail = $q->param('WebMasterEmail') || $ENV{SERVER_ADMIN} || "webmaster\@$ENV{HTTP_HOST}";
my $TWikiFor = $q->param('TWikiFor');
#my $TWikiFor = $q->param('TWikiFor') || 'http://localhost/~twikibuilder/twiki.org.zip';
my $perl = $q->param( 'perl' ) || $EXECUTABLE_NAME;

################################################################################

print $q->header(),
    $q->start_html( -title => 'TWiki Installer',
		    -BGCOLOR => '#f4c000',
		    -style => {
    			-src => [ 'http://twiki.biohack.net/pub/TWikiInstallerContrib/reset.css',
				  'http://twiki.biohack.net/pub/TWikiInstallerContrib/styles.css', ],
			-code => <<__CSS__,
/*
.repository { background:pink; color:green; }
.repositoryName { background:magenta; }
*/
__CSS__
		     },
    -onload => "expand_collapse_repositories('twiki.org'); checkEnableInstallButton(event);",
    -onkeyup => "checkEnableInstallButton(event)",
    -onclick => "checkEnableInstallButton(event)",
    -script => q{
function isEmpty(str) {
	return str === '';
}
function checkEnableInstallButton(e) {
	if (!e) { e = window.event }		// i don't think this works?!!! :(
	
	var disabled = false;
	
	var required_fields = [ 'TWikiFor', 'configure_admin', 'configure_password', 'configure_password2', 'WebMasterEmail', 'TWikiAdmin', 'perl', 'force_installation' ];
	for ( i=0; i<required_fields.length; ++i ) {
		var field = required_fields[i];
		var el = document.getElementById( field );
		if ( el ) {
			if ( isEmpty(el.value) ) { disabled = true }
			if ( el.type === 'checkbox' && !el.checked ) { disabled = true }
		
			// show/hide help elements
			var elHelp = document.getElementById(field+'_help');
			if ( elHelp ) {
				elHelp.style.display = ( e.target === el ? '' : 'none' );
			}
		}
	}

	// see if the passwords match
	var elPasswordMismatch = document.getElementById('password_mismatch');
	var elConfigurePassword = document.getElementById('configure_password');
	var elConfigurePassword2 = document.getElementById('configure_password2');
	if ( isEmpty(elConfigurePassword2.value) || elConfigurePassword.value === elConfigurePassword2.value ) {
		elPasswordMismatch.innerHTML = '';
	} else {
		elPasswordMismatch.innerHTML = 'Passwords do not match';
		disabled = true;
	}

	var btnInstall = document.getElementById('install');
	if ( btnInstall ) { btnInstall.disabled = disabled }
	
	return false;
}
},
		    -head => [ map { 
			       Link({-rel => $_,
				     -href => 'http://twiki.biohack.net/pub/TWikiInstallerContrib/favicon.ico',
				     -type => "image/x-icon"}) } ( 'icon', 'shortcut icon' )
			       ]
			       );

################################################################################

my %installedPlugins;	# which plugins get installed/are encountered
my $twikiDir = "$FindBin::Bin";

my ( $twikiPath ) = $ENV{SCRIPT_NAME} =~ m|(.*)/.*|;		# remove the script name from the path
#print STDERR "twikiPath=[$twikiPath]\n";

# automatically detect required script suffix from this script's filename
my ( $scriptSuffix ) = $ENV{SCRIPT_NAME} =~ m|.*/.*(\..*)$|;
$scriptSuffix ||= '';

my $localDirConfig = {
    # SMELL: doesn't handle httpS --- what happened to $ENV{SCRIPT_URI} ???
	DefaultUrlHost   => "http://$ENV{HTTP_HOST}" . ( $ENV{SERVER_PORT} != 80 && ":$ENV{SERVER_PORT}" || '' ),
	ScriptUrlPath    => "$twikiPath/bin",
	ScriptSuffix     => $scriptSuffix,
	PubUrlPath       => "$twikiPath/pub",
	PubDir           => "$twikiDir/pub",
	TemplateDir      => "$twikiDir/templates",
	DataDir          => "$twikiDir/data",
	LocalesDir       => "$twikiDir/locale",
	LogDir           => "$twikiDir/data",	# ???
    };

# inversion duplication from above (mostly)
my $mapTWikiDirs = {
    lib       => { perms => 0440, dest => "$twikiDir/lib", },
    pub       => { perms => 0660, dest => $localDirConfig->{PubDir}, },
    data      => { perms => 0660, dest => $localDirConfig->{DataDir}, },
    templates => { perms => 0440, dest => $localDirConfig->{TemplateDir}, },
    bin       => { perms => 0550, dest => "$twikiDir/bin", },
    locale    => { perms => 0440, dest => $localDirConfig->{LocalesDir}, },
#    log => ?
};

	print STDERR "FindBin::Bin=[$FindBin::Bin]\n";

################################################################################
# already installed?
################################################################################
sub isTWikiAlreadyInstalled
{
    return -e "$FindBin::Bin/bin/LocalLib.cfg";
}

################################################################################

sub continueToWikiUrl
{
    # TODO: need URI for "view"
    do "lib/TWiki.cfg";
    do "lib/LocalSite.cfg";
    my $url = $TWiki::cfg{DefaultUrlHost} . $TWiki::cfg{ScriptUrlPath} 
    . '/view'.$TWiki::cfg{ScriptSuffix}
    . '/TWiki/InstalledPlugins';

    return $url;
}


################################################################################

sub continueToConfigureUrl
{
    # TODO: need URI for "view"
    do "lib/TWiki.cfg";
    do "lib/LocalSite.cfg";
    my $url = $TWiki::cfg{DefaultUrlHost} . $TWiki::cfg{ScriptUrlPath} . '/configure';

    return $url;
}


################################################################################

unless ( $TWikiFor )
{
    print twikiForMenu( $q ),
    	$q->end_html;
    exit 0;
}

my $tmpInstall = "$FindBin::Bin/tmp/install/";
mkpath $tmpInstall;

install();

print $q->p( $q->a( { -href => continueToWikiUrl() }, "Proceed to the wiki" ) );
print $q->p( $q->a( { -href => continueToConfigureUrl() }, "Configure the wiki" ) );

print $q->end_html;

exit 0;

################################################################################
################################################################################
################################################################################
# do the INSTALLATION

sub install {

print "<h1>Installing...</h1>\n";

my $archive_file = 'install.zip';
unless ( -e $archive_file ) {
    print STDERR "downloading $TWikiFor\n";
    my ( $tar, $error ) = getUrl({ url => $TWikiFor, outfile => $archive_file });
    die $error if $error;

    open( TAR, '>', $archive_file ) or die $!;
    binmode( TAR );
    print TAR $tar;
    close TAR;
}

$q->param( kernel => $archive_file );

################################################################################
# do the INSTALLATION

-d $twikiDir || mkpath $twikiDir or die qq{Couldn't create "$twikiDir" to install into!};
# chmod g+w $twikiDir (?)

InstallTWikiExtension( "$archive_file" );

################################################################################
# LocalLib.cfg
my $fnLocalLibCfg = "$mapTWikiDirs->{bin}->{dest}/LocalLib.cfg";
open( FH, '>', $fnLocalLibCfg ) or die "Can't open $fnLocalLibCfg: $!";
print FH <<'__LOCALLIB_CFG__';
use vars qw( $twikiLibPath );
use Cwd qw( abs_path );
( $twikiLibPath ) = ($twikiLibPath = Cwd::abs_path( 'lib' )) =~ /(.*)/;
1;
__LOCALLIB_CFG__
close( FH ) or die "Can't close $fnLocalLibCfg: $! ???";

################################################################################
# LocalSite.cfg

foreach my $plugin ( sort { lc $a cmp lc $b } keys %installedPlugins ) {
    $LocalSiteCfg .= "\$TWiki::cfg{Plugins}{$plugin}{Enabled} = 1;\n";
}

$LocalSiteCfg .= <<__LOCALSITE_CFG__;
#===============================================================================
\$TWiki::cfg{AutoAttachPubFiles} = 1;
\$TWiki::cfg{EnableHierarchicalWebs} = 1;
\$TWiki::cfg{LoginManager} = 'TWiki::Client::TemplateLogin';
\$TWiki::cfg{UserInterfaceInternationalisation} = 1;
#\$TWiki::cfg{WarningsAreErrors} = 1;
# SMELL: blech, temp hack
\$TWiki::cfg{Site}{CharSet} = 'iso-8859-15';
#===============================================================================
__LOCALSITE_CFG__

# generate LocalSite.cfg entries for variable entries (url/path,...)
foreach my $localSiteEntry ( qw( DefaultUrlHost ScriptUrlPath ScriptSuffix PubUrlPath PubDir TemplateDir DataDir LogDir LocalesDir ) ) {
    # normalise pathnames (entries ending in ...Dir) (Sandbox.pm doesn't like .. in pathnames!)
    $localDirConfig->{ $localSiteEntry } = abs_path( $localDirConfig->{ $localSiteEntry } ) 
	if $localSiteEntry =~ /Dir$/;

    $LocalSiteCfg .= qq{\$TWiki::cfg{$localSiteEntry} = "$localDirConfig->{$localSiteEntry}";\n};
}

# write out LocalSite.cfg
my $fnLocalSiteCfg = "$mapTWikiDirs->{lib}->{dest}/LocalSite.cfg";
open( FH, '>', $fnLocalSiteCfg ) or die "Can't open $fnLocalSiteCfg: $!";
print FH $LocalSiteCfg;
close( FH ) or die "Can't close $fnLocalSiteCfg: $! ???";


################################################################################
# setup configure
if ( $q->param( 'configure_admin' ) ) {
    my $htpasswd_file = $localDirConfig->{DataDir}.'/.htpasswd';
    my $htpasswd_params = ( -e $htpasswd_file ? '' : '-c ' ) . "-b $htpasswd_file " . $q->param('configure_admin') . ' ' . $q->param('configure_password');
    `htpasswd $htpasswd_params`;
}

################################################################################

my $BinHtAccess = <<'EOT' 
#Block access from badly behaving robots and site sucking type programs.
BrowserMatchNoCase ^Accoona blockAccess
BrowserMatchNoCase ^ActiveAgent blockAccess
BrowserMatchNoCase ^Attache blockAccess
BrowserMatchNoCase BecomeBot blockAccess
BrowserMatchNoCase ^bot blockAccess
BrowserMatchNoCase Charlotte/ blockAccess
BrowserMatchNoCase ^ConveraCrawler blockAccess
BrowserMatchNoCase ^CrownPeak-HttpAgent blockAccess
BrowserMatchNoCase ^EmailCollector blockAccess
BrowserMatchNoCase ^EmailSiphon blockAccess
BrowserMatchNoCase ^e-SocietyRobot blockAccess
BrowserMatchNoCase ^Exabot blockAccess
BrowserMatchNoCase ^FAST blockAccess
BrowserMatchNoCase ^FDM blockAccess
BrowserMatchNoCase ^GetRight/6.0a blockAccess
BrowserMatchNoCase ^GetWebPics blockAccess
BrowserMatchNoCase ^Gigabot blockAccess
BrowserMatchNoCase ^gonzo1 blockAccess
BrowserMatchNoCase ^Google\sSpider blockAccess
BrowserMatchNoCase ^ichiro blockAccess
BrowserMatchNoCase ^ie_crawler blockAccess
BrowserMatchNoCase ^iGetter blockAccess
BrowserMatchNoCase ^IRLbot blockAccess
BrowserMatchNoCase Jakarta blockAccess
BrowserMatchNoCase ^Java blockAccess
BrowserMatchNoCase ^KrakSpider blockAccess
BrowserMatchNoCase ^larbin blockAccess
BrowserMatchNoCase ^LeechGet blockAccess
BrowserMatchNoCase ^LinkWalker blockAccess
BrowserMatchNoCase ^Lsearch blockAccess
BrowserMatchNoCase ^Microsoft blockAccess
BrowserMatchNoCase ^MJ12bot blockAccess
BrowserMatchNoCase MSIECrawler blockAccess
BrowserMatchNoCase ^MSRBOT blockAccess
BrowserMatchNoCase ^noxtrumbot blockAccess
BrowserMatchNoCase ^NutchCVS blockAccess
BrowserMatchNoCase ^RealDownload blockAccess
BrowserMatchNoCase ^Rome blockAccess
BrowserMatchNoCase ^Roverbot blockAccess
BrowserMatchNoCase ^schibstedsokbot blockAccess
BrowserMatchNoCase ^Seekbot blockAccess
BrowserMatchNoCase ^SiteSnagger blockAccess
BrowserMatchNoCase ^SiteSucker blockAccess
BrowserMatchNoCase ^Snapbot blockAccess
BrowserMatchNoCase ^sogou blockAccess
BrowserMatchNoCase ^SpiderKU blockAccess
BrowserMatchNoCase ^SpiderMan blockAccess
BrowserMatchNoCase ^Squid blockAccess
BrowserMatchNoCase ^Teleport blockAccess
BrowserMatchNoCase ^User-Agent\: blockAccess
BrowserMatchNoCase VoilaBot blockAccess
BrowserMatchNoCase ^voyager blockAccess
BrowserMatchNoCase ^W3C blockAccess
BrowserMatchNoCase ^w3search blockAccess
BrowserMatchNoCase ^Web\sDownloader blockAccess
BrowserMatchNoCase ^WebCopier blockAccess
BrowserMatchNoCase ^WebDevil blockAccess
BrowserMatchNoCase ^WebSec blockAccess
BrowserMatchNoCase ^WebVac blockAccess
BrowserMatchNoCase ^Webwhacker blockAccess
BrowserMatchNoCase ^Webzip blockAccess
BrowserMatchNoCase ^Wells blockAccess
BrowserMatchNoCase ^WhoWhere blockAccess
BrowserMatchNoCase www\.netforex\.org blockAccess
BrowserMatchNoCase ^WX_mail blockAccess
BrowserMatchNoCase ^yacybot blockAccess
BrowserMatchNoCase ^ZIBB blockAccess
BrowserMatchNoCase ^$ blockAccess
Order Allow,Deny
Allow from all
Deny from env=blockAccess
SetHandler cgi-script
Options ExecCGI FollowSymLinks
<FilesMatch "[^/]*\.html$">
       SetHandler denied
       allow from all
</FilesMatch>

# Limit access to configure to specific IP addresses and or users.
# Make sure configure is not open to the general public.
# It exposes system details that can help attackers.
<FilesMatch "^configure">
    SetHandler cgi-script
    Order Deny,Allow
    Deny from all
    Satisfy Any
EOT

. <<EOT
    Require user $q->param( 'configure_username' )
    AuthUserFile $localDirConfig->{DataDir}/.htpasswd
EOT
    . <<EOT;
    AuthName 'Enter your WikiName: (First name and last name, no space, no dots, capitalized, e.g. JohnSmith). Cancel to register if you do not have one.'
    AuthType Basic
    ErrorDocument 401 /twiki/bin/view/TWiki/TWikiRegistration
</FilesMatch>
EOT

# SMELL: calculate ErrorDocument URL

#print STDERR "mtw/b: ", $mapTWikiDirs->{bin}->{dest}, "\n";
open ( HTACCESS, '>', $mapTWikiDirs->{bin}->{dest} . '/.htaccess' ) or warn $!;
print HTACCESS $BinHtAccess, "\n";
print HTACCESS "ErrorDocument 401 bin/view$scriptSuffix/TWiki/TWikiRegistration\n";
close HTACCESS;

#foreach my $dir qw( pub/Trash data lib locale logs templates test tools twikiplugins ) {
#foreach my $dir qw( data lib locale logs templates test tools twikiplugins ) {
#    my $abs_dir = $localDirConfig->{}/$dir;
#    open( HTACCESS, '>', "$abs_dir/.htaccess" ) or warn $@;
#    print HTACCESS "Deny from all\n";
#    close( HTACCESS );
#}

################################################################################
# finish/cleanup

rmtree 'tmp/';
#unlink $0;			# remove this installation program (security!)
#chmod 0440, $0;		# doesn't seem to be working??? ah, probably an ownership issue (but why does rm work?)
}

################################################################################
################################################################################

# parameters
# module: module filename relative to components (eg, kernels/TWikiDEVELOP6666.zip or extension/BlogPlugin.zip)
sub InstallTWikiExtension {
    my ( $module ) = @_;

    my ( $text, $success, $plugins ) = TWiki::Contrib::TWikiInstallerContrib::_InstallTWikiExtension({ 
	module => $module,
	tmpInstall => $tmpInstall,
	mapTWikiDirs => $mapTWikiDirs,
	localDirConfig => $localDirConfig,
    });
#    print $q->li( @$text );
    foreach my $plugin ( sort keys %$plugins )
    {
	++$installedPlugins{ $plugin };
    }
#    $installedPlugins{ keys %$plugins } = values %$plugins;

    return 1;
}

################################################################################

sub _display_repositories {
    my ( $q, $repository ) = @_;

    my $text = '';

    $text .= q{<script type="text/javascript" >
function expand_collapse_repositories( rep ) {
    var repositories = document.getElementsByName('repository_files');
    for ( i=0; i<repositories.length; ++i ) {
	var r = repositories[i];
	var files = document.getElementById( r.id );
	r.style.display = r.id === rep ? '' : 'none';
    }
}
</script>
};

    foreach my $rep ( sort { lc $a cmp lc $b } keys %$repository ) {
	next unless scalar @{$repository->{$rep}};	# don't print empty repositories
	$text .= qq{<div class=repository>
<div class=repositoryName onclick="expand_collapse_repositories('$rep')" ><img src="http://$rep/favicon.ico" width="16" height="16" /> $rep</div>
<div name="repository_files" id="$rep"><ul>};
	foreach my $twikifor ( @{$repository->{$rep}} ) {
	    $text .= q{<li><a href="javascript:()" onclick="document.getElementById('TWikiFor').value = } . qq{'$twikifor->{url}'" >$twikifor->{url}</a></li>};
	}
	$text .= "</div></ul></div>";
    }

    return $text;
}

################################################################################

# parameters
# cgi: 
sub twikiForMenu {
    my $q = shift or die "no cgi?";
    my $text = '';

my $repository = {
    'twiki.org' => [
		    { url => 'http://twiki.org/p/pub/Codev/Release/TWiki-4.1.2.zip', },
#		    { url => 'http://twiki.org/p/pub/Codev/Release/TWiki-4.1.1.zip', },
#		    { url => 'http://twiki.org/p/pub/Codev/Release/TWiki-4.1.0.zip', },
		    { url => 'http://twiki.org/p/pub/Codev/Release/TWiki-4.0.5.zip', },
#		    { url => 'http://twiki.org/p/pub/Codev/Release/TWiki-4.0.4.zip', },
#		    { url => 'http://twiki.org/p/pub/Codev/Release/TWiki-4.0.3.zip', },
#		    { url => 'http://twiki.org/p/pub/Codev/Release/TWiki-4.0.2.zip', },
#		    { url => 'http://twiki.org/p/pub/Codev/Release/TWiki-4.0.1.zip', },
#		    { url => 'http://twiki.org/p/pub/Codev/Release/TWiki-4.0.0.zip', },
    ],
    'twiki.biohack.net' => [
#		      { url => 'http://twiki.biohack.net/pub/twiki/TWiki-SVN-MAIN.zip', },
		      ],
    'wikiring.de' => [
		       ],
    'wikiring.com' => [
		       ],
    'structuredwikis.com' => [
			      ],
    'distributedinformation.com' => [
				     ],
};

    system( 'htpasswd -V' );
    my $htpasswd_avail = $? == -1 ? ' disabled=disabled ' : '';


    my ( $twikiUrl ) = $ENV{SCRIPT_URI} =~ m|^(.*/)|;

    my $strHtmlForceInstallation = isTWikiAlreadyInstalled() ?
	'<input type=checkbox name=force_installation id=force_installation> <b>Existing TWiki installation detected.</b> Allow forced installation by overwriting files.<br/>' : '';

    $text .= qq{
<div id="container"><a id="topofpage"></a><div class="section">
<!--==========================================================================================-->
<div id="header"><!-- header image --></div>
<h1>TWiki Installer</h1>
The TWiki Installer will install a TWiki release to<br /> 
<div id=twikiUrl><big>$twikiUrl</big></div>
<div class=note>If this is not the desired URL, move this script to the correct directory and load the page in the browser from the new location.</div>
<!--
<ol>
<li>Select a TWiki release from the list of available repositories below.</li>
<li>Fill in the fields below; <strong>all fields are required</strong>. Many have been automatically determined or already filled in with reasonable defaults.
</li>
<li>Click the <strong>Install</strong> button. That's all! </li>
</ol>
-->
<form method="post" action="" enctype="application/x-www-form-urlencoded" />
<!--==========================================================================================-->
<fieldset><legend>1. Choose a TWiki Release</legend>

TWiki release to install <input type="text" name="TWikiFor" id="TWikiFor" value="http://twiki.org/p/pub/Codev/Release/TWiki-4.1.2.zip" size="50" />
<div class=help>Select a TWiki release from the list below <i>or</i> enter a URL manually
<!-- By the way, this should also be able to install TWiki extensions -->
</div>
}

. _display_repositories( $q, $repository ) .

qq{</fieldset>

<!--==========================================================================================-->
<fieldset><legend>2. Set TWiki Settings</legend>
<div id=configure><fieldset id=configure><legend>configure</legend>
username <input $htpasswd_avail type=text name=configure_admin id=configure_admin value='wikimaster' /><br />
<div class=help id=configure_admin_help>This is the account name to allow access to TWiki's system configuration<br/></div>
password <input $htpasswd_avail type=password name=configure_password id=configure_password /><br />
<div class=help id=configure_password_help>Be sure to pick a secure password!<br/></div>
verify password $htpasswd_avail <input type=password name=configure_password2 id=configure_password2 /> <span id=password_mismatch></span><br/>
<div class=help id=configure_password2_help>Type in the same password again<br/></div></fieldset></div>

<b>TWikiAdmin</b> <input type="text" name="TWikiAdmin" id="TWikiAdmin" size="35" value="$twikiAdmin" /><br />
<div class=help id=TWikiAdmin_help>This TWiki account will be created and added to the <a target="_new" href="http://twiki.org/cgi-bin/view/TWiki/AccessControl#The_Super_Admin_Group">TWikiAdminGroup</a>. 
A password will be automatically generated and sent to the email specified by WebMasterEmail below<br/></div>

<b>WebMasterEmail</b> <input type="text" name="WebMasterEmail" id=WebMasterEmail value="$WebMasterEmail" size="35" /><br />
<div class=help id=WebMasterEmail_help>This will automatically set the TWiki webmaster email address <a target="_new" href="http://twiki.org/cgi-bin/view/TWiki/DefaultPreferences#Email_and_Proxy_Server_Settings">WebMasterEmail</a> <!-- in Main.SitePreferences --><br/></div>

<!--
<b>WebMasterEmailNAME</b> <input type="text" name="WebMasterEmailNAME" value="TWiki Administrator" size="35" /><br />
<br/>
-->

<b>perl</b> (full path) <input type="text" name="perl" id="perl" value="$perl" size="30" /> (automatically detected)<br/>
<div class=help id=perl_help>You may also change it to a perl accelerator, e.g,. <a target="_new" href="http://www.daemoninc.com/SpeedyCGI/">SpeedyCGI</a><br/></div>
</fieldset>
<!--==========================================================================================-->
<fieldset><legend>3. Install TWiki!</legend>
$strHtmlForceInstallation
<input type="submit" name="install" id="install" value="Install" /> to $twikiDir <br />
</fieldset>
<!--==========================================================================================-->
After the installation, you can start using the wiki right away or configure it in more detail.
</div></div>
</form>

</div>
<!--==========================================================================================-->
<!-- <div class="footer">Copyright &copy; 2007 Will Norris. All Rights Reserved.</div> -->
<!--==========================================================================================-->
	</div>
</div>
};

################################################################################

    $text .= $q->hidden( -name => 'TWikiFor', -value => $q->param('TWikiFor') );

################################################################################

    return $text;
}

################################################################################

# parameters
# cgi: 
sub installationMenu {
    my $q = shift or die "no cgi?";
    my $text = '';

    $text .= $q->start_form
	. $q->hidden( -name => 'TWikiFor', -value => $q->param('TWikiFor') )
	. $q->hidden( -name => 'force', -value => $q->param('force') )
	. $q->submit( -name => 'install', -value => 'Install' );

    my @kernels = sort map { basename /(.*)\./ } <$tmpInstall/components/kernel/*>;
    $text .= $q->div( { -class => 'kernel', },
		      $q->checkbox_group( -name => 'kernel',
					  -values => \@kernels,
#					  -values => [ grep { m|\.| } @kernels ],
#					  -labels => { @kernels },
					  -linebreak => 'true',
					  )
		      );
    
    $text .= $q->div( { -class => 'configuration' },
		      $q->b( 'perl' ) . ' (full path): ' 
		      . $q->textfield( -name => 'perl', -default => $perl, -size => 40 )
		      . $q->br
		      . $q->small( '(may also be the name of a perl accelerator, e.g,. '
				   . $q->a( { -href => "http://www.daemoninc.com/SpeedyCGI/" }, 'SpeedyCGI' ) . ')'
				   )
		      . $q->br
		      . $q->b( 'TWikiAdmin' ) . ': '
		      . $q->textfield( -name => 'TWikiAdmin', -default => $twikiAdmin, -size => 25 )
		      . $q->br
		      . $q->b( 'WebMasterEmail' ) . ': '
		      . $q->textfield( -name => 'WebMasterEmail', -default => $WebMasterEmail, -size => 25 )
		      . $q->br
		      );
			    
    my @extensions = sort map { basename /(.*)\./ } <$tmpInstall/components/extension/*>;

    # do defaults creation/manipulation here, because CGI ...
    if ( grep( /^all$/i, ( $q->param('extension') ) ) ) {
	$q->param( -name => 'extension', -value => \@extensions );
    }

    $text .= $q->div( { -class => 'extension', },
		      $q->checkbox_group( -name => 'extension',
					  -values => \@extensions,
#					  -values => [ grep { m|\.| } @extensions ],
#					  -labels => { @extensions },
					  -linebreak => 'true',
					  -columns => 3,
					  )
		      );

    $text .= $q->end_form;

    return $text;
}

################################################################################
################################################################################

use Socket;
sub getUrl
{
    my $p = shift;

    my ( $theHost, $theUrl ) = $p->{url} =~ m|http://(.*?)(/.*)|;
    my $thePort = 80;
    my $theHeader = '';

    my $result = '';
    my $req = "GET $theUrl HTTP/1.0\r\n$theHeader\r\n\r\n";
    my ( $iaddr, $paddr, $proto );
    $iaddr   = inet_aton( $theHost );
    $paddr   = sockaddr_in( $thePort, $iaddr );
    $proto   = getprotobyname( 'tcp' );
    socket( SOCK, PF_INET, SOCK_STREAM, $proto )  or die "socket: $!";
    connect( SOCK, $paddr ) or die "connect: $!";
    select SOCK; $| = 1;
    print SOCK $req;
    while( <SOCK> ) { $result .= $_; }
    close( SOCK )  or die "close: $!";
    select STDOUT;
    return ( $result, 0 );
}

################################################################################

# url: 
#use LWP::UserAgent;
#use HTTP::Request;
#use HTTP::Response;
#sub getUrl {
#    my ( $p ) = @_;
#    my $url = $p->{url} or die qq{required parameter "url" not specified};
#
#    my $ua = LWP::UserAgent->new() or die $!;
#    $ua->agent( "TWiki remote installer v0.0.1" );
#    my $req = HTTP::Request->new( GET => $url );
#    # TODO: what about http vs. https ?
#    die unless $req;
#    $req->referer( "$ENV{SERVER_NAME}:$ENV{SERVER_PORT}$ENV{SCRIPT_NAME}" );
#    my $response = $ua->request($req);
#    die if $response->is_error();
#
#    return $response->is_error() ? ( undef, $response->status_line ) : ( $response->content(), '' );
#}

################################################################################
################################################################################
# WARNING: ../TWikiInstallerContrib.pm gets appended to the end of this file,
#          so don't do anything silly like __DATA__ or __END__ blocks :)
################################################################################
################################################################################
