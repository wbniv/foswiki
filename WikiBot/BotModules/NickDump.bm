################################
# NickDump Module              #
################################

package BotModules::NickDump;
use vars qw(@ISA);
@ISA = qw(BotModules);
1;

# RegisterConfig - Called when initialised, should call registerVariables
sub RegisterConfig {
    my $self = shift;
    $self->SUPER::RegisterConfig(@_);
    $self->registerVariables(
      # [ name, save?, settable? ]
        ['delay', 1, 1, 360],
        ['channel', 1, 1, '#twikibot'],
    );
}

# Schedule - called when bot connects to a server, to install any schedulers
# use $self->schedule($event, $delay, $times, $data)
# where $times is 1 for a single event, -1 for recurring events,
# and a +ve number for an event that occurs that many times.

#sub Schedule {
#    my $self = shift;
#    my ($event) = @_;
#    $self->schedule($event, \$self->{'delay'}, -1, 'nickdump');
#    $self->SUPER::Schedule($event);
#}

sub Help {
    my $self = shift;
    my ($event) = @_;
    return {
        '' => 'This module lists the connected nicks on a regular basis, it provides perspective when reading IRC logs.',
    } if $self->isAdmin($event);
    return {};
}

#sub Scheduled {
#    my $self = shift;
#    my ($event, @data) = @_;
#    if ($data[0] eq 'nickdump') {
#        local $event->{'channel'} = $self->{'channel'};
#    	DumpNicks($self, $event});
#    } else {
#        $self->SUPER::Scheduled($event, @data);
#    }
#}

sub Told {
    my $self = shift;
    my ($event, $message) = @_;
    if ($message =~ /^\s*nickdump\s*$/osi) {
    	$self->say($event, "The following nicks are currently connected: ".Nicks());
    } else {
        return $self->SUPER::Told(@_);
    }
    return 0; # we've dealt with it, no need to do anything else.
}

sub Nicks {
    return "<Nicks>";
}

