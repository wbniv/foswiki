#!/bin/bash
#========= now, we must rebuild. This part can be left as slow code
shopt -s extglob
gzip=false;case "$HTTP_ACCEPT_ENCODING" in *gzip*)gzip=true;esac
url=${PATH_INFO%/}
bin=XXXbinXXX
view=XXXviewXXX
data=XXXdataXXX
logs=XXXlogsXXX
cache=XXXcacheXXX
homeweb=XXXhomewebXXX
ss=XXXscriptsuffixXXX

#echo 'Content-Type: text/plain';echo; echo "dir=$PWD";set;exit 0
L () { date +"| %d %b %Y - %H:%M | guest | view | ${2#.} | $1 | $REMOTE_ADDR |" >>$logs/`date +'log%Y%m.txt'`; }
W () { echo `date '+%Y-%m-%d.%H:%M'` "$@" >>$logs/twpc-warnings.txt; }
D () { echo `date '+%Y-%m-%d.%H:%M'` "$@" >>$logs/twpc-debug.txt; }

# if we are here, $url is thus certified without query string
url="$1"

# To avoid building caches for non-existent pages, check that source exist
if test ! -f "$data"$url.txt; then
  # check for bogus /HomeWev/Web url coming from linking /Web instead of /Web/
  case "$url" in
    /$homeweb/[A-Z][^/]*) web="${url##*/}"
      if test -d "$data/$web"; then
         D "WEB_URL_NO_SLASH /$web (was $url) ==> /$web/"
         PATH_INFO="/$web/"; exec ./pccr
      fi ;;
  esac
  if test -z "$url" -o "$url" = /; then W "URL_BUT_NO_FILE (passthrough) $url"; fi
  echo "Location: $bin/vief$ss$url";echo; exit 0
fi

mkdir -p "$cache${url%/*}" "${cache}_tmp"

# see if the cache is already being made. wait for lock between 30 & 60s
let "timeout=30+($RANDOM/999)"
starttime=$SECONDS; time=0
while ! ln -s _ "$cache$url".lk 2>/dev/null; do
  let "sleeptime=100+($RANDOM/327)"
  D WAIT $$ $time "$cache$url"
  sleep ${sleeptime:0:1}.${sleeptime:1}  # sleep between 1s and 2s
  let "time=$SECONDS-starttime"
  if test -e "$cache$url.gz" -o -e "$cache$url.nc"; then # cache ready
    D WAITED $$ $time "$cache$url"
    exec ./pccr
  fi
  if let "timeout-- <= 0"; then  # timeout expired, build anyways and hope
    W LOCK_TIMEOUT $$ $time "$cache$url"
    rm -f "$cache$url".lk
    continue
  fi
done

# ok, we are the one going to create the cached page
tmp="${cache}_tmp/$$"
D "MISS $$ http://$SERVER_NAME:$SERVER_PORT$bin/vief$ss$url"

# $tmp .hd=headers .bd=body
wget -O - -S "http://$SERVER_NAME:$SERVER_PORT$bin/vief$ss$url" 2>$tmp.hd |\
  sed -e 's,\(href=[^ ]*\)'$bin'/vie[fw]/,\1'"$view/,g" \
      -e 's,\(<base href="http://[^"]*\)'$bin'/vie[wf]/,\1'$view'/,g' \
      >$tmp.bd
status=`grep -m 1 '^ *HTTP/' $tmp.hd`
if test "${status##* }" = OK; then
  D BUILT $$ "$cache$url".gz "http://$SERVER_NAME:$SERVER_PORT$bin/view$url"
  type=`grep -m 1 '^ *Content-Type' $tmp.hd`; type="${type##*( )}"
  etag=`date '+%s-%N'`
  (echo "$type"; echo "Content-Encoding: gzip"; echo "ETag: \"$etag\""; echo
   gzip -9) \
    <$tmp.bd >$tmp.gz
  (echo "$type";echo "ETag: \"$etag\""; echo;cat) <$tmp.bd >$tmp.raw
  if $gzip;then cat $tmp.gz; else cat $tmp.raw; fi
  if test ! -h "$cache$url".lk; then # strange. we'd better restart
    let "time=$SECONDS-starttime"
    W LOCK_MISSING $time "$cache$url"
    rm -f $tmp.hd $tmp.bd $tmp.raw $tmp.gz 
    exec ./pccr
  fi
  # avoid race conditions and broken pipe errors with an atomic replace
  if test ! -e "$cache$url".nc; then # else %PCACHEEXPTIME{0}% var in topic
    mv $tmp.raw "$cache$url".tx; mv $tmp.gz "$cache$url".gz
  fi
else # protected page (Moved) or other non-OK status
  D "NOT_BUILT $$ ${status##* } $cache$url.nc $bin/view$url"
  rm -f "$cache$url".lk $tmp.hd $tmp.bd $tmp.raw $tmp.gz
  >"$cache$url.nc"
  echo "Location: $bin/vief$ss$url";echo; exit 0
fi

rm -f "$cache$url".lk $tmp.hd $tmp.bd $tmp.raw $tmp.gz
exit 0

### EMACS MODES
### Local Variables: ***
### mode:ksh ***
### End: ***
