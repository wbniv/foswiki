@CPAN = (
		    qw( ExtUtils::MakeMaker Storable Test::More Test::Harness YAML ),
		qw( Compress::Raw::Zlib IO::Compress::Base Compress::Raw::Bzip2 IO::Compress::Bzip2 IO::Compress::Gzip Compress::Zlib IO::Zlib ),
		qw( IO::String Archive::Tar Data::Startup ),
		qw( Math::BigInt Math::BigRat bignum ),
		qw( File::Package File::Where File::AnySpec Tie::Gzip Archive::TarGzip ExtUtils::CBuilder ExtUtils::ParseXS Tree::DAG_Node Carp::Assert ),
		qw( Class::Data::Inheritable Class::ISA Class::Virtually::Abstract File::Which Archive::Zip ),
		qw( Module::Find Sub::Uplevel Test::Exception Array::Compare Test::Warn 
File::MMagic ?
File::MMtypes MIME::Types Archive::Any ),
	qw( Module::Build ),
		    qw( Error URI HTML::Tagset HTML::Parser LWP LWP::UserAgent XML::NamespaceSupport XML::Parser XML::Simple Algorithm::Diff Text::Diff ),
#		    qw( HTML::Form HTML::HeadParser HTTP::Status HTML::TokeParser HTTP::Daemon HTTP::Request ),
		qw( Test::Simple Test::LongString),
		    qw( WWW::Mechanize HTML::TableExtract WWW::Mechanize::TWiki ),
		    qw( Number::Compare Text::Glob File::Find::Rule ),	# also MailInContrib
		    qw( File::Slurp File::Slurp::Tree ),
		    qw( CGI::Session ),
		    qw( Encode Locale::Maketext::Lexicon ),
		    qw( Digest::base Digest::SHA1 ),
		    qw( Unicode::Map Unicode::Map8 Jcode Unicode::String Unicode::MapUTF8 ),
	qw( Time::ParseDate ),	# for MailInContrib, BlogPlugin, Schedule::Cron
	qw( Time::Local ),	# for BlogPlugin
	qw( Barcode::Code128 ),		# BarcodePlugin
	qw( Carp::Clan Bit::Vector Date::Calc ),		# CalendarPlugin, HolidaylistPlugin
	qw( HTML::CalendarMonthSimple ),	# CalendarPlugin
	qw( Data::UUID ),		# GuidPlugin
#	qw( Convert::ASN1 Digest::HMAC_MD5 Authen::SASL Net::SSLeay IO::Socket::SSL Net::LDAP ),		# LDAPPasswordChangerPlugin, LdapPlugin
	qw( Convert::ASN1 Digest::HMAC_MD5 Authen::SASL IO::Socket::SSL Net::LDAP ),		# LDAPPasswordChangerPlugin, LdapPlugin
				# (for Net::LDAP GSSAPI (didn't install: 'krb5-config command... not found!')
	qw( Date::Handler ),		# LocalTimePlugin
#	qw( XML::Sablotron ),		# SablotronPlugin (doesn't install: 'Sablotron.xs:39:20: sablot.h: No such file or directory')
	qw( Image::LibRSVG ),		# SvgPlugin (doesn't install: 'LibRSVG.xs:28:26: librsvg/rsvg.h: No such file or directory')
	qw( I18N::AcceptLanguage ),	# TopicTranslationsPlugin
	qw( Weather::Com ),		# WeatherPlugin
	qw( DBD::mysql ),		# BugzillaQueryPlugin, MailReminderPlugin
	qw( XML::SAX XML::LibXML::Common XML::LibXML XML::LibXSLT Text::ParseWords Cache::Cache String::CRC ),	# XmlQueryPlugin (XML::Simple above)
	qw( List::Permutor ),		# SuggestLinkPlugin
	qw( Image::Info ),		# LatexModePlugin
	qw( MIME::Lite XML::Stream Net::XMPP Net::Jabber ),	# optional SOAP::Lite interfaces
	qw( SOAP::Lite ),		# SoapClientPlugin
	qw( Font::AFM HTML::Element HTML::FormatText Date::Format ),	# URLCachePlugin
	qw( IO::Pty Curses Term::Cap Event POE Net::IP Net::DNS POE::Component::Client::DNS POE::Component::Client::Ident POE::Filter::IRCD Net::Netmask POE::Component::IRC POE::Component::Server::IRC ),	# IrcContrib
	qw( Net::IRC ),			# IrcPlugin
	qw( SVN::Simple::Edit List::Util Class::Autouse File::chdir Class::Accessor Sort::Versions Term::ReadKey SVN::Mirror IO::Pager ),
		qw( Algorithm::Annotate Clone Data::Hierarchy File::Type PerlIO PerlIO::eol PerlIO::via::symlink PerlIO::via::dynamic IO::Digest Pod::Escapes Pod::Simple Regexp::Shellish ),
	qw( File::Spec File::Temp Getopt::Long List::MoreUtils Locale::Maketext::Simple App::CLI Path::Class YAML::Syck version SVK ),
				   # SVK (YAML, Test::More, Encode, Data::UUID already included)
# also (optional for SVN::Mirror) VCP::Dest::svk (VCP?)
#	qw( Authen::SASL XML::Stream Net::Jabber ),	# ImmediateNotifyPlugin (already included by SOAP::Lite for SoapClientPlugin)
	qw( Email::Simple Module::Pluggable Email::FolderType Email::Folder Email::FolderType::Net MIME::Base64 Email::MIME::Encodings Email::MIME::ContentType Email::MIME File::Path::Expand Email::LocalDelivery Email::Delete Net::POP3 Email::Folder::POP3 Net::IMAP::Simple URI::imap Email::Folder::IMAP ),	# MailInContrib
	qw( Tk Devel::ptkdb ),		# for debugging
	qw( Test::Manifest DateTime::Format::W3CDTF DateTime::Format::Mail XML::RSS ),			# for tools/tinderbox/latest-svn-revision.pl
	qw( Class::Inner Devel::Symdump Test::Unit::Debug ),
	qw( Bit::Vector::Minimal IO::Scalar ),
		qw( Lingua::GL::Stemmer Lingua::PT::Stemmer Lingua::Stem::Fr Lingua::Stem::It Lingua::Stem::Ru Lingua::Stem::Snowball::Da Lingua::Stem::Snowball::No Lingua::Stem::Snowball::Se Text::German Lingua::Stem::En ),
	qw( Tie::Array::Sorted Time::Piece ),
	qw( Plucene Plucene-SearchEngine-1.1 ),		# SearchEnginePluceneAddOn
	qw( Class::Factory Class::Observable DBI DBI::DBD DBD::Mock Params::Validate DateTime::Locale Class::Singleton ),
	qw( Cwd DateTime::TimeZone DateTime::Format::Strptime Devel::StackTrace Exception::Class Log::Dispatch Log::Log4perl Workflow ),
		# (DBD::CSV or SQL::Statement for Log::Log4perl tests)
	qw( DBD::SQLite Math::Units Parse::RecDescent URI::Find Date::Parse ),	# PipSqueek
		# (Class::Accessor, DBI, POE already installed) 
	qw( Schedule::Cron ),
	qw( Spreadsheet::WriteExcel Date::Manip ),	# FormMeta2ExcelAddOn
	qw( Image::Magick ),
	qw( JSON ),					# InlineEditPlugin
	qw( Safe HTML::Mason ),				# MasonPlugin
	qw( HTTP::Lite Class::Accessor::Chained Text::vFile::asData Set::Infinite DateTime::Set FreezeThaw DateTime DateTime::Event::Recurrence DateTime::Event::ICal DateTime::Format::ICal iCal::Parser ),	# http://twiki.org/p/pub/Plugins/CalendarPluginDev/Calendar.pl.txt
	qw( B::PerlReq ),		# for BuildContrib's make dependencies
	qw( DBIx::FullTextSearch ),	# TWiki:Codev.DatabaseStore
);

__END__

my $nCols = 3;

use CGI qw( :standard );

my $nPerCol = int( ( scalar @CPAN +$nCols-1 ) / $nCols );

@CPAN = sort { lc $a cmp lc $b } @CPAN;

my @row;
for my $i ( 0..$nCols-1 ) {
    my $start = ($i*$nPerCol);
    push @row, td( "\n" . join( '', map { $_ && "   * [[CPAN:$_]]\n" || '' } @CPAN[ $start .. $start+$nPerCol-1 ] ) );
}

print table({},
	    caption( "Included CPAN Modules (" . scalar @CPAN . ' installed)' ),
	    Tr( {-valign=>'top'}, @row )
	    ), "\n";

# duplicates checking
my $u; map { ++$u->{$_} } @CPAN;
my $diff = scalar @CPAN - scalar keys %$u;
warn "duplicates! ($diff)\n" if $diff;
while ( my ( $module, $count ) = each( %$u ) ) {
	warn "$module\n" if $count>1;
}

