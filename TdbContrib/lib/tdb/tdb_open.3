.TH tdb_open 3 "Aug 16, 2000" "Samba" "Linux Programmer's Manual"
.SH NAME
tdb_open \- Open a tdb database.
.SH SYNOPSIS
.nf
.B #include <tdb.h>
.sp
.BI "TDB_CONTEXT *tdb_open(const char *" pathname ", int " hash_size ","
.BI "        int " tdb_flags ", int " open_flags ", mode_t " mode " );"
.sp
.SH DESCRIPTION
Open the database, creating it if necessary. The 
.I hash 
size is advisory, use zero for a default value. 
.I tdb_flags
can be one of
.TP
.B TDB_CLEAR_IF_FIRST
Clear database if we are the only one with it open.
.TP
.B TDB_INTERNAL
Don't use a file, instead store the data in memory. The 
.I pathname
,
.I open_flags
, and
.I mode
are ignored in
this case. This is useful if you need a quick associative array or map.
.TP
.B TDB_NOLOCK
Don't do any locking (this is always turned on for read-only file
descriptors)
.TP
.B TDB_NOMMAP 
Don't use mmap.
.TP
.B TDB_CONVERT 
Create a database in the reverse of native endian: normally when the
database is created (or cleared with TDB_CLEAR_IF_FIRST), it is
created in native endian order.  This flag is set (or unset)
automatically for existing databases.
.PP
The 
.I open_flags 
and 
.I mode 
are passed straight to the open call on the database file. A flags
value of O_WRONLY is invalid.
.SH "RETURN VALUE"
On success a pointer to an opaque data structure, a TDB_CONTEXT is
returned. On error a NULL is returned.
.SH AUTHORS
Software: Andrew Tridgell <tridge@linuxcare.com> and Luke Kenneth Casson Leighton
Man page: Ben Woodard <ben@valinux.com>
.SH "SEE ALSO"
.BR open (2),
.BR gdbm (3),
.BR tdb(3)
