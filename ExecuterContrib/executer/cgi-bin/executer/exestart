#!/usr/bin/perl

#NOTE: Apache on linux does not like it when the shebang line ends with Windows style new line.
#!c:/perl/bin/Perl.exe
##
##  exestart -- CGI trigger the executer 
##
##  TODO: Those functionalities should really be implemented by Slion::TWiki::Executer don't you think
##
##	URL parameters:
##  @bin: 	The URI to our TWiki bin directory. Example: https://slion.net/bin
##  @web: 	The TWiki Web from which to read the task specification
##  @topic:	The TWiki Topic from which to read the task specification
##
##  Usage example:
##  http://myexecuter.net/executer/exestart?bin=https://mytwiki.net/bin&web=Sandbox&topic=TestTWikiExecuter
##


use strict;
use warnings;

use CGI;
use Config::Simple;
	
#print "HTTP/1.1 302 Moved\n";
#Date: Fri, 01 Dec 2006 16:26:26 GMT
#Server: Apache/2.2.3 (Debian) mod_perl/2.0.2 Perl/v5.8.8
#Set-Cookie: TWIKISID=db2c5f1fa9002536fc65da507627fbe1; path=/

#print "Status: 302 Moved\n";
#print "Location: http://buildserver.local/twiki/bin/view/Sandbox/TestExecuter25\n\n";
#print "Content-type: text/plain; charset=iso-8859-1\n\n";

#File used by executer to start a task
my $startFile;
#File used only by exestart as a temporary file to make sure the executer won't start a task which has been half defined 
my $startFilePrep;
my $errorFile;
my $errorFilePrep;

if ($^O eq 'MSWin32')
    {
    $startFile='C:\executer\exestart.txt';    $startFilePrep='C:\executer\exestartprep.txt';
    $errorFile='C:\executer\exeerror.txt';
    $errorFilePrep='C:\executer\exeerrorprep.txt';
    }
else
    {
    $startFile='/tmp/exestart.txt';    $startFilePrep='/tmp/exestartprep.txt';
    $errorFile='/tmp/exeerror.txt';
    $errorFilePrep='/tmp/exeerrorprep.txt';
    }



#print "$startFilePrep";
#print "$startFile";

#my $vars=Vars(); #get all CGI parameter

my $query = new CGI;
my $vars = $query->Vars;

my $web=$query->param('web');
my $topic=$query->param('topic');
my $bin=$query->param('bin');

if (!$web || !$topic || !$bin)
	{
	CompleteWithMessage("ERROR: Must specifiy bin, web and topic parameter for the Executer to start a task!");
	exit 0;			
	}

if (!(-f $startFile))
	{				
	#open FILE, "> $startFilePrep" or die "ERROR: Can't open $startFilePrep!\n";
	#print FILE "$bin\n$web\n$topic";
	#close FILE;
	
	#Use Config::Simple to save our start up file
	my $cfg = new Config::Simple(syntax=>'simple'); #$startFilePrep
	
	#Put all the CGI parameters in the CFG file 
	while ( my ($key, $value) = each(%$vars) )
    	{     	
       	$cfg->param($key,$value);
       	}
				
	$cfg->save($startFilePrep);
	$cfg->close(); 
	$cfg=undef;
    
    chmod(0666,$startFilePrep);	#everyone is read and write
	rename($startFilePrep,$startFile);
    #On linux we have problem with the permission on that file. Basically the user running executer.pl must be able to delete it.
    #chown('www-data','users',$startFile); #TODO: what shall we do with hard coded uid and gid? It's mandatory to allow the user of executer.pl to delete that file
    	
	
	CompleteWithMessage("The task has started!");
	
	#print "Task is starting!\n";			
	}
else
	{	
	#We could not start the task surely because the executer is busy with another task
	#Just come back from where we came from by doing redirect
	#Typically the referer should display the status and the error message	
	CompleteWithMessage("ERROR: Could not start the task the Executer is busy!");	
	}
	
exit 0;

#sub routine declaration


#sub CompleteWithMessage;

=pod
Complete the HTTP request with/without message in fact :)
It makes a redirection to the calling URL (HTTP_REFERER).
=cut	

sub CompleteWithMessage
	{
	my $msg=shift;
	
	my $httpReferer=$ENV{HTTP_REFERER};	
	
	if (!defined $httpReferer)
		{
		print "Content-type: text/plain; charset=iso-8859-1\n\n";
		print "$msg";
		return;		
		}
	
	
	print "Status: 302 Moved\n";	
	if ($httpReferer=~/(.*)\?.*/)
		{
		$httpReferer=$1; # Strip out URL parameters	
		}		
			
	print "Location: $httpReferer?executermsg=$msg\n\n"; #with message
	#print "Location: $httpReferer\n\n";	#without message		
	}		

sub CompleteWithoutMessage
	{
	my $msg=shift;
	
	my $httpReferer=$ENV{HTTP_REFERER};	
	
	if (!defined $httpReferer)
		{
		print "Content-type: text/plain; charset=iso-8859-1\n\n";
		print "$msg";
		return;		
		}
	
	
	print "Status: 302 Moved\n";	
	if ($httpReferer=~/(.*)\?.*/)
		{
		$httpReferer=$1; # Strip out URL parameters	
		}		
			
	#print "Location: $httpReferer?executermsg=$msg\n\n"; #with message
	print "Location: $httpReferer\n\n";	#without message		
	}			
	

